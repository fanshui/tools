Xstreams1.Xstream解析器	DomDriver() JDK库	xpp3 默认	JettisonMappedXmlDriver() Json解析器	JsonHierarchicalStreamDriver：只支持序列化，不支持反序列化。	You require 				xstream-[version].jar, 				xpp3-[version].jar 				and xmlpull-[version].jar in the classpath. 	Xpp3 is a very fast XML pull-parser implementation. If you do not want to include these dependencies, 	you can use a standard JAXP DOM parser or since Java 6 the integrated StAX parser instead:	XStream xstream = new XStream(new DomDriver()); // does not require XPP3 library	XStream xstream = new XStream(new StaxDriver()); // does not require XPP3 library starting with Java 6	Xstream xstream = new Xstream();2.序列化/反序列化	String xml = xstream.toXML(bean);	bean=(Object)xstream.fromXML(xml);	不序列化xml中没有的：		XStream xstreamX = new XStream(new DomDriver()) {        protected MapperWrapper wrapMapper(MapperWrapper next) {            return new MapperWrapper(next) {                public boolean shouldSerializeMember(@SuppressWarnings("rawtypes")Class definedIn,String fieldName) {                    return definedIn != Object.class && super.shouldSerializeMember(definedIn, fieldName);                }            };        }    };3.注解	XStream xstream = new XStream();
	xstream.processAnnotations(Object.class);//应用Object类的注解
	xstream.autodetectAnnotations(true);//自动检测注解		(1)类别名、属性别名		@XStreamAlias("别名")				@XStreamAlias("人")
		class Person
		{
			@XStreamAlias("姓名")
			private String name;
			@XStreamAlias("年龄")
			private int age;
			@XStreamAlias("朋友")
			private List friends;		}	(2)省略集合根节点 		@XStreamImplicit(itemFieldName="集合中重复节点名")		@XStreamImplicit(itemFieldName="朋友")
		private List<String> friends;	(3)设置属性		@XStreamAsAttribute				@XStreamAsAttribute
		private String name;
		@XStreamAsAttribute
		private int age;		<Person name="张三" age="19"></Person>		(4)隐藏字段		@XStreamOmitField				@XStreamOmitField
		private List<String> friends;//不序列化该字段	(5)设置转换器		@XStreamConverter()		@XStreamConverter(value=BooleanConverter.class,booleans={false},strings={"男","女"})
		private boolean sex;	(6)只有单个字段的元素，有属性		<message type="15" important="no" created="1154097812245">This is the message content.</message>		@XStreamAlias("message")
		@XStreamConverter(value=ToAttributedValueConverter.class, strings={"content"})
		class RendezvousMessage {

			@XStreamAlias("type")
			private int messageType;

			private String content;
			
			@XStreamConverter(value=BooleanConverter.class, booleans={false}, strings={"yes", "no"})
			private boolean important;

			@XStreamConverter(SingleValueCalendarConverter.class)
			private Calendar created = new GregorianCalendar();
		}4.转换器	(1)Xstream自带的转换器				**BooleanConverter			@XStreamConverter(value=BooleanConverter.class, booleans={false}, strings={"yes", "no"})
			private boolean important;						<important>no</important>					(2)自定义转换器		常用的转换器接口与抽象类
			SingleValueConverter：单值转换接口  类中只有单个属性
			AbstractSingleValueConverter：单值转换抽象类
			Converter：常规转换器接口					================================================		SingleValueConverter：单值转换接口 把一个对象 <==> 字符串			need:				<blog author="Guilherme Silveira"></blog>			now:				<blog>
				  <author>
					<name>Guilherme Silveira</name>
				  </author>				</blog>			public class Blog {
				private Author writer;			}			public class Author {
				private String name;			}						对象Author不能作为属性			需要把 Author 中的name,转为属性 author			即把Author转成String			do:使用SingleValueConverter并为实现我们自己的转换器：				class AuthorConverter implements SingleValueConverter {					 public boolean canConvert(Class type) {
						return type.equals(Author.class);
					}					public String toString(Object obj) {
						return ((Author) obj).getName();
					}					public Object fromString(String name) {
						return new Author(name);
					}				}				xstream.registerConverter(new AuthorConverter());		===========================================================		AbstractSingleValueConverter：单值转换抽象类				public class Person {
				private String name;
		}		public class PersonConverter extends AbstractSingleValueConverter {

				public boolean canConvert(Class clazz) {
						return clazz.equals(Person.class);
				}

				public Object fromString(String str) {
						Person person = new Person();
						person.setName(string);
						return person;
				}

		} 		<person>Guilherme</person>		=======================================================		常规转换器接口   Calendar		**********************			@XStreamAlias("message")
			class RendezvousMessage {

				@XStreamAlias("type")
				private int messageType;

				@XStreamImplicit(itemFieldName="part")
				private List<String> content;
				
				private boolean important;
				
				private Calendar created = new GregorianCalendar();

				public RendezvousMessage(int messageType, boolean important, String... content) {
					this.messageType = messageType;
					this.important = important;
					this.content = Arrays.asList(content);
				}

			}				未转换：			<message>
			  <type>15</type>
			  <part>firstPart</part>
			  <part>secondPart</part>
			  <important>false</important>
			  <created>
				<time>1154097812245</time>
				<timezone>America/Sao_Paulo</timezone>
			  </created>
			</message>						do：			@XStreamConverter(SingleValueCalendarConverter.class)
			private Calendar created = new GregorianCalendar();						public class SingleValueCalendarConverter implements Converter {

				public void marshal(Object source, HierarchicalStreamWriter writer,
						MarshallingContext context) {
					Calendar calendar = (Calendar) source;
					writer.setValue(String.valueOf(calendar.getTime().getTime()));
				}

				public Object unmarshal(HierarchicalStreamReader reader,
						UnmarshallingContext context) {
					GregorianCalendar calendar = new GregorianCalendar();
					calendar.setTime(new Date(Long.parseLong(reader.getValue())));
					return calendar;
				}

				public boolean canConvert(Class type) {
					return type.equals(GregorianCalendar.class);
				}
			}			result:			<message>
			  <type>15</type>
			  <part>firstPart</part>
			  <part>secondPart</part>
			  <important>false</important>
			  <created>1154097812245</created>
			</message>			***********************		class Person
		{
			private String name;
			private int age;		}		转换器类 继承convert		public class PersonConverter implements Converter 
		{
			@Override//定义转换器能转换的JavaBean类型
			public boolean canConvert(Class type)
			{
				return type.equals(Person.class);
			}
			@Override//把对象序列化成XML或Json
			public void marshal(Object value, HierarchicalStreamWriter writer, 
									MarshallingContext context)
			{
				Person person = (Person) value;
				writer.startNode("姓名");
				writer.setValue(person.getName());
				writer.endNode();
				writer.startNode("年龄");
				writer.setValue(person.getAge()+"");
				writer.endNode();
				writer.startNode("转换器");
				writer.setValue("自定义的转换器");
				writer.endNode();
			}
			@Override//把XML或Json反序列化成对象
			public Object unmarshal(HierarchicalStreamReader reader, 
							UnmarshallingContext context)
			{
				   Person person = new Person("",-1);
				   reader.moveDown();
				   person.setName(reader.getValue());
				   reader.moveUp();
				   reader.moveDown();
				   person.setAge(Integer.parseInt(reader.getValue()));
				   reader.moveUp();
				   return person;
			}
		}				执行：			xstream.registerConverter(new PersonConverter());//注册转换器			//序列化
			String xml = xstream.toXML(bean);
			//反序列化
			bean=(Person)xstream.fromXML(xml);		result:			<test.Person>
			  <姓名>张三</姓名>
			  <年龄>19</年龄>
			  <转换器>自定义的转换器</转换器>
			</test.Person>		*************************		带构造函数的转换器DateConverter 		public class DateConverter implements Converter {

				private Locale locale;

				public DateConverter(Locale locale) {
						super();
						this.locale = locale;
				}

				public boolean canConvert(Class clazz) {						//Calendar的子类
						 return Calendar.class.isAssignableFrom(clazz);
				}

				public void marshal(Object value, HierarchicalStreamWriter writer,
								MarshallingContext context) {					Calendar calendar = (Calendar) value;

					// grabs the date
					Date date = calendar.getTime();

					// grabs the formatter
					DateFormat formatter = DateFormat.getDateInstance(DateFormat.FULL,
									this.locale);

					// formats and sets the value
					writer.setValue(formatter.format(date));
				}

				public Object unmarshal(HierarchicalStreamReader reader,
								UnmarshallingContext context) {
						// creates the calendar
						GregorianCalendar calendar = new GregorianCalendar();

						// grabs the converter
						DateFormat formatter = DateFormat.getDateInstance(DateFormat.FULL,
										this.locale);

						// parses the string and sets the time
						try {
								calendar.setTime(formatter.parse(reader.getValue()));
						} catch (ParseException e) {
								throw new ConversionException(e.getMessage(), e);
						}

						// returns the new object
						return calendar;
				}

		}				xStream.registerConverter(new DateConverter(new Locale("pt", "br")));		****************************		转换器嵌套		public class Birthday {
				private Person person;
				private Calendar date;
				private char gender;			}		public class BirthdayConverter implements Converter {

					public boolean canConvert(Class clazz) {
							return Birthday.class == clazz;
					}

					public void marshal(Object value, HierarchicalStreamWriter writer,
									MarshallingContext context) {
							Birthday birthday = (Birthday)value;
							if (birthday.getGender() != '\0') {
									writer.addAttribute("gender", Character.toString(birthday.getGender()));
							}
							if (birthday.getPerson() != null) {
									writer.startNode("person");
									context.convertAnother(birthday.getPerson());
									writer.endNode();
							}
							if (birthday.getDate() != null) {
									writer.startNode("birth");
									context.convertAnother(birthday.getDate());
									writer.endNode();
							}
					}

					public Object unmarshal(HierarchicalStreamReader reader,
									UnmarshallingContext context) {
							Birthday birthday = new Birthday();
							String gender = reader.getAttribute("gender");
							if (gender != null) {
									if (gender.length() > 0) {              
											if (gender.char(0) == 'f') {
													birthday.setGenderFemale();
											} else if (gender.char(0) == 'm') {
													birthday.setFemale();
											} else {
													throw new ConversionException("Invalid gender value: " + gender);
											}
									} else {
											throw new ConversionException("Empty string is invalid gender value");
									}
							}
							while (reader.hasMoreChildren()) {
									reader.moveDown();
									if ("person".equals(reader.getNodeName())) {
											Person person = (Person)context.convertAnother(birthday, Person.class);
											birthday.setPerson(person);
									} else if ("birth".equals(reader.getNodeName())) {
											Calendar date = (Calendar)context.convertAnother(birthday, Calendar.class);
											birthday.setDate(date);
									}
									reader.moveUp();
							}
							return birthday;
					}

			}5.IO	(1)Xstream对象输出流			执行：			XStream xstream = new XStream();
			ObjectOutputStream out = xstream.createObjectOutputStream(System.out);
			out.writeObject(new Person("张三",12));
			out.writeObject(new Person("李四",19));
			out.writeObject("Hello");
			out.writeInt(12345);			//Remember to call ObjectOutputStream.close(), otherwise the stream will contain incomplete XML.
			out.close();				result:			<object-stream>
			  <test.Person>
				<name>张三</name>
				<age>12</age>
			  </test.Person>
			  <test.Person>
				<name>李四</name>
				<age>19</age>
			  </test.Person>
			  <string>Hello</string>
			  <int>12345</int>
			</object-stream>	Because an XML document can only have a single root node, all the serialized elements must be	 wrapped in an additional root node. This root node defaults to <object-stream>, as shown in the     example above.
	This can be changed by using the overloaded method: 			xstream.createObjectOutputStream(Writer writer, String rootNodeName);
				(2)Xstream对象输入流						String s="<object-stream>						<test.Person><name>张三</name><age>12</age></test.Person>						<int>12345</int>					</object-stream>";
			StringReader reader = new StringReader(s);
			XStream xstream = new XStream();
			ObjectInputStream in = xstream.createObjectInputStream(reader);
			System.out.println((Person) in.readObject());
			System.out.println(in.readInt());6.Xstream持久化API	(1)保存JavaBean对象				PersistenceStrategy strategy = new FilePersistenceStrategy(new File("D:\\tmp"));
		List list = new XmlArrayList(strategy);
		list.add(new Person("张三",13));//保存数据
		list.add(new Person("李四",21));
		list.add(new Person("王五",17));	result:		D:\tmp目录,有三个文件:int@0.xml、int@1.xml、int@2.xml；每个对象都被序列化到XML文件里	(2)读取并删除JavaBean对象				PersistenceStrategy strategy = new FilePersistenceStrategy(new File("D:\\tmp"));
		List list = new XmlArrayList(strategy);
		for (Iterator it = list.iterator(); it.hasNext();)
		{
			System.out.println((Person) it.next());
			it.remove();//删除对象序列化文件
		}				result:			Person [name=张三, age=13]
			Person [name=李四, age=21]
			Person [name=王五, age=17]7.json	 JsonHierarchicalStreamDriver  can only be used to write XML	  JettisonMappedXmlDriver     based on Jettison and can also deserialize JSON to Java objects again		Stream xstream = new XStream(new JettisonMappedXmlDriver());
        xstream.setMode(XStream.NO_REFERENCES);
        xstream.alias("product", Product.class);	